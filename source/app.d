/*
Copyright © 2018, Clipsey

Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software is furnished to do so, all subject to the following:

The copyright notices in the Software and this entire statement, including the above license grant, this restriction and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all derivative works of the Software, unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/
import std.stdio;
import std.file;
import std.conv;
import codebuilder;
import compiler;
import preprocessor;

string helptext = "
Options:
-t/transpile (file(s)) - Transpile binary/executable file(s)
-c/compile (file(s))   - Compile uwu file(s)
-l/license             - Shows license text.
-h/help                - Shows this help text.

Extras:
-whatsthis             - replace uwu with owo

Examples:
uwu -t hello.exe
uwu -c hello.uwu

You can also transpile non-executable files, if you really want to.
uwu -t some_file.png
";

string licensetext = "
Copyright © 2018, Clipsey

Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and accompanying documentation covered by this license (the \"Software\") to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software is furnished to do so, all subject to the following:

The copyright notices in the Software and this entire statement, including the above license grant, this restriction and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all derivative works of the Software, unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
";

int main(string[] vargs) {
	try {
		if (vargs.length < 2) {
			writeln("Not enough arguments specified!"~helptext);
			return 1;
		}
		string[] args = vargs[1..$];
		if (args[0] == "-whatsthis") {
			args = vargs[2..$];
			OWO_ENABLED = true;
		}
		if (args[0] == "-t" || args[0] == "transpile") {
			foreach(f; args[1..$]) {
				if (!exists(f)) {
					throw new Exception("File \""~f~"\" not found!");
				}
				CodeBuilder cb = new CodeBuilder();
				// Input file
				File file = File(f);

				// Output file.
				string of = f;
				if (f[$-4] == '.') of = f[0..$-3]~"uwu";
				else of = of~".uwu";
				File bfile = File(of, "w");

				ubyte[] buffer = [1];
				while (buffer.length != 0) {
					buffer = file.rawRead(new ubyte[4096]);
					transpile(buffer, &cb);
				}
				
				bfile.write(cb.UWUCode);
				writeln("Transpiled to "~of~" with byte length of "~cb.UWUCode.length.text~"...");
			}
			return 0;
		}
		if (args[0] == "-c" || args[0] == "compile") {
			foreach(f; args[1..$]) {
				if (!exists(f)) {
					throw new Exception("File \""~f~"\" not found!");
				}
				CodeBuilder cb = new CodeBuilder();
				// Input file
				File file = File(f);

				// Output file.
				string of = f;
				version(Windows) {
					if (f[$-4] == '.') of = f[0..$-3]~"exe";
					else of = of~".exe";
				} else {
					if (f[$-4] == '.') of = f[0..$-4];
					else of = of~"-elf";
				}
				File bfile = File(of, "w");

				char[] buffer = [' '];
				long offset = 0;
				while (buffer.length != 0) {
					buffer = file.rawRead(new char[8]);
					offset += buffer.length;
					compile(preprocess(cast(string)buffer), &cb);

					// Skip whitespace characters.
					char[] peekc = file.rawRead(new char[1]);
					while (peekc.length != 0 && (peekc[0] == ' ' || peekc[0] == '\t' || peekc[0] == '\n' || peekc[0] == '\0')) {
						offset++;
						peekc = file.rawRead(new char[1]);
						// wait...
					}
					if (peekc.length == 0) break;
					file.seek(offset);
				}
				
				bfile.rawWrite(cb.Bytecode);
				writeln("Compiled to file "~of~" successfully!");
			}
			return 0;
		}
		if (args[0] == "-l" || args[0] == "license") {
			writeln(licensetext);
			return 0;
		}
		if (args[0] == "-h" || args[0] == "help") {
			writeln(helptext);
			return 0;
		}
		writeln("Invalid option \""~args[0]~"\"!"~helptext);
		return 1;
	} catch (Exception ex) {
		writeln("An error occured while compiling!... <", ex.message, ">");
		return 2;
	}
}